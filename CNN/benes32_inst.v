// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.


// Generated by Quartus Prime Version 17.0 (Build Build 595 04/25/2017)
// Created on Mon Nov 27 14:58:55 2017

benes32 benes32_inst
(
	.clk(clk_sig) ,	// input  clk_sig
	.yin1(yin1_sig) ,	// output [N-1:0] yin1_sig
	.yin2(yin2_sig) ,	// output [N-1:0] yin2_sig
	.yin3(yin3_sig) ,	// output [N-1:0] yin3_sig
	.yin4(yin4_sig) ,	// output [N-1:0] yin4_sig
	.yin5(yin5_sig) ,	// output [N-1:0] yin5_sig
	.yin6(yin6_sig) ,	// output [N-1:0] yin6_sig
	.yin7(yin7_sig) ,	// output [N-1:0] yin7_sig
	.yin8(yin8_sig) ,	// output [N-1:0] yin8_sig
	.yin9(yin9_sig) ,	// output [N-1:0] yin9_sig
	.yin10(yin10_sig) ,	// output [N-1:0] yin10_sig
	.yin11(yin11_sig) ,	// output [N-1:0] yin11_sig
	.yin12(yin12_sig) ,	// output [N-1:0] yin12_sig
	.yin13(yin13_sig) ,	// output [N-1:0] yin13_sig
	.yin14(yin14_sig) ,	// output [N-1:0] yin14_sig
	.yin15(yin15_sig) ,	// output [N-1:0] yin15_sig
	.yin16(yin16_sig) ,	// output [N-1:0] yin16_sig
	.yin17(yin17_sig) ,	// output [N-1:0] yin17_sig
	.yin18(yin18_sig) ,	// output [N-1:0] yin18_sig
	.yin19(yin19_sig) ,	// output [N-1:0] yin19_sig
	.yin20(yin20_sig) ,	// output [N-1:0] yin20_sig
	.yin21(yin21_sig) ,	// output [N-1:0] yin21_sig
	.yin22(yin22_sig) ,	// output [N-1:0] yin22_sig
	.yin23(yin23_sig) ,	// output [N-1:0] yin23_sig
	.yin24(yin24_sig) ,	// output [N-1:0] yin24_sig
	.yin25(yin25_sig) ,	// output [N-1:0] yin25_sig
	.yin26(yin26_sig) ,	// output [N-1:0] yin26_sig
	.yin27(yin27_sig) ,	// output [N-1:0] yin27_sig
	.yin28(yin28_sig) ,	// output [N-1:0] yin28_sig
	.yin29(yin29_sig) ,	// output [N-1:0] yin29_sig
	.yin30(yin30_sig) ,	// output [N-1:0] yin30_sig
	.yin31(yin31_sig) ,	// output [N-1:0] yin31_sig
	.yin32(yin32_sig) ,	// output [N-1:0] yin32_sig
	.xin1(xin1_sig) ,	// input [N-1:0] xin1_sig
	.xin2(xin2_sig) ,	// input [N-1:0] xin2_sig
	.xin3(xin3_sig) ,	// input [N-1:0] xin3_sig
	.xin4(xin4_sig) ,	// input [N-1:0] xin4_sig
	.xin5(xin5_sig) ,	// input [N-1:0] xin5_sig
	.xin6(xin6_sig) ,	// input [N-1:0] xin6_sig
	.xin7(xin7_sig) ,	// input [N-1:0] xin7_sig
	.xin8(xin8_sig) ,	// input [N-1:0] xin8_sig
	.xin9(xin9_sig) ,	// input [N-1:0] xin9_sig
	.xin10(xin10_sig) ,	// input [N-1:0] xin10_sig
	.xin11(xin11_sig) ,	// input [N-1:0] xin11_sig
	.xin12(xin12_sig) ,	// input [N-1:0] xin12_sig
	.xin13(xin13_sig) ,	// input [N-1:0] xin13_sig
	.xin14(xin14_sig) ,	// input [N-1:0] xin14_sig
	.xin15(xin15_sig) ,	// input [N-1:0] xin15_sig
	.xin16(xin16_sig) ,	// input [N-1:0] xin16_sig
	.xin17(xin17_sig) ,	// input [N-1:0] xin17_sig
	.xin18(xin18_sig) ,	// input [N-1:0] xin18_sig
	.xin19(xin19_sig) ,	// input [N-1:0] xin19_sig
	.xin20(xin20_sig) ,	// input [N-1:0] xin20_sig
	.xin21(xin21_sig) ,	// input [N-1:0] xin21_sig
	.xin22(xin22_sig) ,	// input [N-1:0] xin22_sig
	.xin23(xin23_sig) ,	// input [N-1:0] xin23_sig
	.xin24(xin24_sig) ,	// input [N-1:0] xin24_sig
	.xin25(xin25_sig) ,	// input [N-1:0] xin25_sig
	.xin26(xin26_sig) ,	// input [N-1:0] xin26_sig
	.xin27(xin27_sig) ,	// input [N-1:0] xin27_sig
	.xin28(xin28_sig) ,	// input [N-1:0] xin28_sig
	.xin29(xin29_sig) ,	// input [N-1:0] xin29_sig
	.xin30(xin30_sig) ,	// input [N-1:0] xin30_sig
	.xin31(xin31_sig) ,	// input [N-1:0] xin31_sig
	.xin32(xin32_sig) ,	// input [N-1:0] xin32_sig
	.s(s_sig) 	// input [b32-1:0] s_sig
);

defparam benes32_inst.Q = 15;
defparam benes32_inst.N = 32;
defparam benes32_inst.b32 = 9;
defparam benes32_inst.b16 = 7;
